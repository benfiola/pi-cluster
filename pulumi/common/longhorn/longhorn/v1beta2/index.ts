// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BackingImageArgs } from "./backingImage";
export type BackingImage = import("./backingImage").BackingImage;
export const BackingImage: typeof import("./backingImage").BackingImage = null as any;
utilities.lazyLoad(exports, ["BackingImage"], () => require("./backingImage"));

export { BackingImageDataSourceArgs } from "./backingImageDataSource";
export type BackingImageDataSource = import("./backingImageDataSource").BackingImageDataSource;
export const BackingImageDataSource: typeof import("./backingImageDataSource").BackingImageDataSource = null as any;
utilities.lazyLoad(exports, ["BackingImageDataSource"], () => require("./backingImageDataSource"));

export { BackingImageManagerArgs } from "./backingImageManager";
export type BackingImageManager = import("./backingImageManager").BackingImageManager;
export const BackingImageManager: typeof import("./backingImageManager").BackingImageManager = null as any;
utilities.lazyLoad(exports, ["BackingImageManager"], () => require("./backingImageManager"));

export { BackupArgs } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BackupTargetArgs } from "./backupTarget";
export type BackupTarget = import("./backupTarget").BackupTarget;
export const BackupTarget: typeof import("./backupTarget").BackupTarget = null as any;
utilities.lazyLoad(exports, ["BackupTarget"], () => require("./backupTarget"));

export { BackupVolumeArgs } from "./backupVolume";
export type BackupVolume = import("./backupVolume").BackupVolume;
export const BackupVolume: typeof import("./backupVolume").BackupVolume = null as any;
utilities.lazyLoad(exports, ["BackupVolume"], () => require("./backupVolume"));

export { EngineArgs } from "./engine";
export type Engine = import("./engine").Engine;
export const Engine: typeof import("./engine").Engine = null as any;
utilities.lazyLoad(exports, ["Engine"], () => require("./engine"));

export { EngineImageArgs } from "./engineImage";
export type EngineImage = import("./engineImage").EngineImage;
export const EngineImage: typeof import("./engineImage").EngineImage = null as any;
utilities.lazyLoad(exports, ["EngineImage"], () => require("./engineImage"));

export { InstanceManagerArgs } from "./instanceManager";
export type InstanceManager = import("./instanceManager").InstanceManager;
export const InstanceManager: typeof import("./instanceManager").InstanceManager = null as any;
utilities.lazyLoad(exports, ["InstanceManager"], () => require("./instanceManager"));

export { NodeArgs } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { OrphanArgs } from "./orphan";
export type Orphan = import("./orphan").Orphan;
export const Orphan: typeof import("./orphan").Orphan = null as any;
utilities.lazyLoad(exports, ["Orphan"], () => require("./orphan"));

export { RecurringJobArgs } from "./recurringJob";
export type RecurringJob = import("./recurringJob").RecurringJob;
export const RecurringJob: typeof import("./recurringJob").RecurringJob = null as any;
utilities.lazyLoad(exports, ["RecurringJob"], () => require("./recurringJob"));

export { ReplicaArgs } from "./replica";
export type Replica = import("./replica").Replica;
export const Replica: typeof import("./replica").Replica = null as any;
utilities.lazyLoad(exports, ["Replica"], () => require("./replica"));

export { SettingArgs } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { ShareManagerArgs } from "./shareManager";
export type ShareManager = import("./shareManager").ShareManager;
export const ShareManager: typeof import("./shareManager").ShareManager = null as any;
utilities.lazyLoad(exports, ["ShareManager"], () => require("./shareManager"));

export { SnapshotArgs } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SupportBundleArgs } from "./supportBundle";
export type SupportBundle = import("./supportBundle").SupportBundle;
export const SupportBundle: typeof import("./supportBundle").SupportBundle = null as any;
utilities.lazyLoad(exports, ["SupportBundle"], () => require("./supportBundle"));

export { SystemBackupArgs } from "./systemBackup";
export type SystemBackup = import("./systemBackup").SystemBackup;
export const SystemBackup: typeof import("./systemBackup").SystemBackup = null as any;
utilities.lazyLoad(exports, ["SystemBackup"], () => require("./systemBackup"));

export { SystemRestoreArgs } from "./systemRestore";
export type SystemRestore = import("./systemRestore").SystemRestore;
export const SystemRestore: typeof import("./systemRestore").SystemRestore = null as any;
utilities.lazyLoad(exports, ["SystemRestore"], () => require("./systemRestore"));

export { VolumeArgs } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeAttachmentArgs } from "./volumeAttachment";
export type VolumeAttachment = import("./volumeAttachment").VolumeAttachment;
export const VolumeAttachment: typeof import("./volumeAttachment").VolumeAttachment = null as any;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:longhorn.io/v1beta2:BackingImage":
                return new BackingImage(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:BackingImageDataSource":
                return new BackingImageDataSource(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:BackingImageManager":
                return new BackingImageManager(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:BackupTarget":
                return new BackupTarget(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:BackupVolume":
                return new BackupVolume(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:Engine":
                return new Engine(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:EngineImage":
                return new EngineImage(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:InstanceManager":
                return new InstanceManager(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:Node":
                return new Node(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:Orphan":
                return new Orphan(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:RecurringJob":
                return new RecurringJob(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:Replica":
                return new Replica(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:ShareManager":
                return new ShareManager(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:SupportBundle":
                return new SupportBundle(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:SystemBackup":
                return new SystemBackup(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:SystemRestore":
                return new SystemRestore(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "kubernetes:longhorn.io/v1beta2:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "longhorn.io/v1beta2", _module)
